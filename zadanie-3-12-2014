#include <iostream>
#include "stdafx.h"
#include <cmath>
 
//using namespace std;
 
class Point
{
private: 
	double x,y;
 
public:
	Point(double _x, double _y)
	{
		this->x = _x;
		this->y = _y;
	}
	Point(){
		this->x = 0;
        this->y = 0;
	}
	Point(const Point &_p)
    {
        this->x = _p.x;
        this->y = _p.y;
    }
 
	void setX(double _x){
		this->x = _x;
	}
	void setY(double _y){
		this->y = _y;
	}
	double getX(){
		return this->x;
	}
	double getY(){
		return this->y;
	}
};

class Point_Spatial: public Point
{
private:
	double z;
public:
	Point_Spatial(double _x, double _y, double _z):Point(_x,_y)
	{
		this->z = _z;
	}
	Point_Spatial():Point(){
		this->z = 0;
	}
	void setZ(double _z){
		this->z = _z;
	}
	double getZ(){
		return this->z;
	}
};
class Figure
{
	
};
 
class circle: public Figure
{
private:
	double r; // r = radius
	Point a;
public:
	circle(Point _a, double _r)
	{
		this->r = _r;
		this->a = _a;
	}
		void seta(Point _a){
			this->a = _a;
		}
		void setr(double _r){
			this->r = _r;
		}
		Point geta(){
			return this->a;
		}
		double getr(){
			return this->r;
		}


};
class triangle: public Figure
{
private:
	Point a,b,c;
public:
	triangle(Point _a, Point _b, Point _c)
	{
		this->a = _a;
		this->b = _b;
		this->c = _c;
	}
};
class tetragon: public Figure // czworokÄ…t dziedziczy po figurze,
{
private: 
		Point a;
		Point b;
		Point c;
		Point d;
 
	public:
		tetragon(Point _a, Point _b, Point _c, Point _d)
		{
			this->a = _a;
			this->b = _b;
			this->c = _c;
			this->d = _d;
		}
		void seta(Point _a){
			this->a = _a;
		}
		void setb(Point _b){
			this->b = _b;
		}
		void setc(Point _c){
			this->c = _c;
		}
		void setd(Point _d){
			this->d = _d;
		}
		Point geta(){
			return this->a;
		}
		Point getb(){
			return this->b;
		}
		Point getc(){
			return this->c;
		}
		Point getd(){
			return this->d;
		}
};
 
class rectangle: public tetragon
{
public:
	rectangle(Point _a, Point _b, Point _c, Point _d):tetragon(_a,_b,_c,_d){}
 
};

class square: public rectangle
{
public:
	square(Point _a, Point _b, Point _c, Point _d):rectangle(_a,_b,_c,_d){}
};

class pentagon: public rectangle
{
private:
	Point e;
public:
	pentagon(Point _a, Point _b, Point _c, Point _d, Point _e):rectangle(_a,_b,_c,_d){
		this->e = _e;
	}
};

class Figure_Spatial
{
	virtual void circumference(){}
};

class pyramid_triangular: public Figure_Spatial
{
private:
	Point_Spatial points[3];
public:
	pyramid_triangular(Point_Spatial _a, Point_Spatial _b, Point_Spatial _c, Point_Spatial _d)
	{
		this->points[0] = _a;
		this->points[1] = _b;
		this->points[2] = _c;
		this->points[3] = _d;
	}
	virtual void circumference()
{
	double cir = 0; // circumference
	for(int i=0;i<3;i++){ // base of the pyramid
	cir += sqrt(
 ( points[(i)%3].getX() -  points[(i+1)%3].getX() ) * ( points[(i)%3].getX() - points[(i+1)%3].getX() ) + 
 ( points[(i)%3].getY() -  points[(i+1)%3].getY() ) * ( points[(i)%3].getY() - points[(i+1)%3].getY() ) +
 ( points[(i)%3].getZ() -  points[(i+1)%3].getZ() ) * ( points[(i)%3].getZ() - points[(i+1)%3].getZ() )
); 
	}
	for(int i=0;i<3;i++){ //the side walls of the pyramid
 cir += sqrt(
 ( points[i].getX() -  points[3].getX() ) * ( points[i].getX() - points[3].getX() ) + 
 ( points[i].getY() -  points[3].getY() ) * ( points[i].getY() - points[3].getY() ) +
 ( points[i].getZ() -  points[3].getZ() ) * ( points[i].getZ() - points[3].getZ() ));
}
	std::cout << cir << std::endl;
}
};
class pyramid_tetragonal: public Figure_Spatial
{
private:
	Point_Spatial points[4];
public:
	pyramid_tetragonal(Point_Spatial _a, Point_Spatial _b, Point_Spatial _c, Point_Spatial _d, Point_Spatial _e)
	{
		this->points[0] = _a;
		this->points[1] = _b;
		this->points[2] = _c;
		this->points[3] = _d;
		this->points[4] = _e;
	}
	virtual void circumference()
{
	double cir = 0; // circumference
	for(int i=0;i<4;i++){ // base of the pyramid
	cir += sqrt(
 ( points[(i)%4].getX() -  points[(i+1)%4].getX() ) * ( points[(i)%4].getX() - points[(i+1)%4].getX() ) + 
 ( points[(i)%4].getY() -  points[(i+1)%4].getY() ) * ( points[(i)%4].getY() - points[(i+1)%4].getY() ) +
 ( points[(i)%4].getZ() -  points[(i+1)%4].getZ() ) * ( points[(i)%4].getZ() - points[(i+1)%4].getZ() )
); 
	}
	for(int i=0;i<4;i++){ //the side walls of the pyramid
 cir += sqrt(
 ( points[i].getX() -  points[4].getX() ) * ( points[i].getX() - points[4].getX() ) + 
 ( points[i].getY() -  points[4].getY() ) * ( points[i].getY() - points[4].getY() ) +
 ( points[i].getZ() -  points[4].getZ() ) * ( points[i].getZ() - points[4].getZ() ));
}
	std::cout << cir << std::endl;
}

};
class pyramid_pentagonal: public Figure_Spatial
{
private:
	Point_Spatial points[5];
public:
	pyramid_pentagonal(Point_Spatial _a, Point_Spatial _b, Point_Spatial _c, Point_Spatial _d, Point_Spatial _e, Point_Spatial _f)
	{
		this->points[0] = _a;
		this->points[1] = _b;
		this->points[2] = _c;
		this->points[3] = _d;
		this->points[4] = _e;
		this->points[5] = _f;
	}
	virtual void circumference()
{
	double cir = 0; // circumference
	for(int i=0;i<5;i++){ // base of the pyramid
	cir += sqrt(
 ( points[(i)%5].getX() -  points[(i+1)%5].getX() ) * ( points[(i)%5].getX() - points[(i+1)%5].getX() ) + 
 ( points[(i)%5].getY() -  points[(i+1)%5].getY() ) * ( points[(i)%5].getY() - points[(i+1)%5].getY() ) +
 ( points[(i)%5].getZ() -  points[(i+1)%5].getZ() ) * ( points[(i)%5].getZ() - points[(i+1)%5].getZ() )
); 
	}
	for(int i=0;i<5;i++){ //the side walls of the pyramid
 cir += sqrt(
 ( points[i].getX() -  points[5].getX() ) * ( points[i].getX() - points[5].getX() ) + 
 ( points[i].getY() -  points[5].getY() ) * ( points[i].getY() - points[5].getY() ) +
 ( points[i].getZ() -  points[5].getZ() ) * ( points[i].getZ() - points[5].getZ() ));
}
	std::cout << cir << std::endl;
}

};
class prism_triangular: public Figure_Spatial
{
private:
	Point_Spatial a,b,c,d,e,f;
public:
	prism_triangular(Point_Spatial _a, Point_Spatial _b, Point_Spatial _c, Point_Spatial _d, Point_Spatial _e, Point_Spatial _f)
	{
		this->a = _a;
		this->b = _b;
		this->c = _c;
		this->d = _d;
		this->e = _e;
		this->f = _f;
	}
};
class prism_tetragonal: public Figure_Spatial
{
private:
	Point_Spatial a,b,c,d,e,f,g,h;
public:
	prism_tetragonal(Point_Spatial _a, Point_Spatial _b, Point_Spatial _c, Point_Spatial _d, Point_Spatial _e, Point_Spatial _f, Point_Spatial _g, Point_Spatial _h)
	{
		this->a = _a;
		this->b = _b;
		this->c = _c;
		this->d = _d;
		this->e = _e;
		this->f = _f;
		this->g = _g;
		this->h = _h;
	}

};
class prism_pentagonal: public Figure_Spatial
{
private:
	Point_Spatial a,b,c,d,e,f,g,h,i,j;
public:
	prism_pentagonal(Point_Spatial _a, Point_Spatial _b, Point_Spatial _c, Point_Spatial _d, Point_Spatial _e, Point_Spatial _f, Point_Spatial _g, Point_Spatial _h, Point_Spatial _i, Point_Spatial _j)
	{
		this->a = _a;
		this->b = _b;
		this->c = _c;
		this->d = _d;
		this->e = _e;
		this->f = _f;
		this->g = _g;
		this->h = _h;
		this->i = _i;
		this->j = _j;
	}

};
int main()
{
Point_Spatial tab[4];
tab[0].setX(0);tab[0].setY(0);tab[0].setZ(0);
tab[1].setX(0);tab[1].setY(5);tab[1].setZ(0);
tab[2].setX(5);tab[2].setY(0);tab[2].setZ(0);
tab[3].setX(5);tab[3].setY(0);tab[3].setZ(0);
tab[4].setX(0);tab[4].setY(5);tab[4].setZ(0);
tab[5].setX(0);tab[5].setY(0);tab[5].setZ(5);

pyramid_pentagonal testowa = pyramid_pentagonal(tab[0],tab[1],tab[2],tab[3],tab[4],tab[5]);

testowa.circumference();
system("pause");

		return 0;
}
