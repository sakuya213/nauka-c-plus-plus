#include <iostream>
#include "stdafx.h"
#include <cmath>
 
//using namespace std;
class Point
{
private: 
	double x,y;
 
public:
	Point(double _x, double _y){
		this->x = _x;
		this->y = _y;
	}
	Point(){
		this->x = 0;
        this->y = 0;
	}
	Point(const Point &_p){
        this->x = _p.x;
        this->y = _p.y;
    }
 
	void setX(double _x){
		this->x = _x;
	}
	void setY(double _y){
		this->y = _y;
	}
	double getX(){
		return this->x;
	}
	double getY(){
		return this->y;
	}
};

class PointSpatial: public Point
{
private:
	double z;
public:
	PointSpatial(double _x, double _y, double _z):Point(_x,_y){
		this->z = _z;
	}
	PointSpatial():Point(){
		this->z = 0;
	}
	void setZ(double _z){
		this->z = _z;
	}
	double getZ(){
		return this->z;
	}
};

double getDistance(Point _a, Point _b)
{
	double Dist = 0; // distance between points

	Dist = sqrt(
 ( _a.getX() -  _b.getX() ) * ( _a.getX() - _b.getX() ) + 
 ( _a.getY() -  _b.getY() ) * ( _a.getY() - _b.getY() )
);
	return Dist;
}
double getDistance(PointSpatial _a, PointSpatial _b)
{
	double Dist = 0; // distance between points

	Dist = sqrt(
 ( _a.getX() -  _b.getX() ) * ( _a.getX() - _b.getX() ) + 
 ( _a.getY() -  _b.getY() ) * ( _a.getY() - _b.getY() ) +
 ( _a.getZ() -  _b.getZ() ) * ( _a.getZ() - _b.getZ() )
);
	return Dist;
}
class Figure
{
	virtual double circumference(){
	return 0;
	}
	virtual double area(){
	return 0;
	}
};
 
class Circle: public Figure
{
private:
	double r; // r = radius
	Point a;
public:
	Circle(Point _a, double _r){
		this->r = _r;
		this->a = _a;
}
		void setA(Point _a){
			this->a = _a;
		}
		void setR(double _r){
			this->r = _r;
		}
		Point getA(){
			return this->a;
		}
		double getR(){
			return this->r;
		}

		double area()
		{
			double areaC = 0;
			areaC = (3.14 * r * r);
		
		return areaC;
		}


};
class Triangle: public Figure
{
private:
	Point points[2];

public:	Triangle(Point _a, Point _b, Point _c){
		this->points[0] = _a;
		this->points[1] = _b;
		this->points[2] = _c;
}
		double circumference()
{
	double cir = 0; // circumference
	for(int i=0;i<3;i++){ // cir triangle
	cir += sqrt(
 ( points[(i)%3].getX() -  points[(i+1)%3].getX() ) * ( points[(i)%3].getX() - points[(i+1)%3].getX() ) + 
 ( points[(i)%3].getY() -  points[(i+1)%3].getY() ) * ( points[(i)%3].getY() - points[(i+1)%3].getY() )
); 
	}
	return cir;
}

	double area()
	{
		double p = 0.5 * this->circumference();
		double P = sqrt
			(
				p * 
				( p - getDistance(points[0],points[1]))*
				( p - getDistance(points[1],points[2]))* 
				( p - getDistance(points[0],points[2]))
			);
	
		return P;
	}
};
class Tetragon: public Figure // inherits quadrilateral figure
{
private: 
	Point points[3];
 
public:
	Tetragon(Point _a, Point _b, Point _c, Point _d){
		this->points[0] = _a;
		this->points[1] = _b;
		this->points[2] = _c;
		this->points[3] = _d;
}
		double circumference()
{
	double cir = 0; // circumference
	for(int i=0;i<4;i++){ // cir tetragon
	cir += sqrt(
 ( points[(i)%4].getX() -  points[(i+1)%4].getX() ) * ( points[(i)%4].getX() - points[(i+1)%4].getX() ) + 
 ( points[(i)%4].getY() -  points[(i+1)%4].getY() ) * ( points[(i)%4].getY() - points[(i+1)%4].getY() )
); 
	}
	return cir;
}
};
 
class Rectangle: public Figure
{
private:
	Point points[3];
public:
	Rectangle(Point _a, Point _b, Point _c, Point _d){
		this->points[0] = _a;
		this->points[1] = _b;
		this->points[2] = _c;
		this->points[3] = _d;
}
	double circumference()
{
	double cir = 0; // circumference
	for(int i=0;i<4;i++){ // cir Rectangle
	cir += sqrt(
 ( points[(i)%4].getX() -  points[(i+1)%4].getX() ) * ( points[(i)%4].getX() - points[(i+1)%4].getX() ) + 
 ( points[(i)%4].getY() -  points[(i+1)%4].getY() ) * ( points[(i)%4].getY() - points[(i+1)%4].getY() )
); 
	}
	return cir;
}
};

class Square: public Figure
{
private:
	Point points[3];
public:
	Square(Point _a, Point _b, Point _c, Point _d){
		this->points[0] = _a;
		this->points[1] = _b;
		this->points[2] = _c;
		this->points[3] = _d;
}
	double circumference()
{
	double cir = 0; // circumference
	for(int i=0;i<4;i++){ // cir square
	cir += sqrt(
 ( points[(i)%4].getX() -  points[(i+1)%4].getX() ) * ( points[(i)%4].getX() - points[(i+1)%4].getX() ) + 
 ( points[(i)%4].getY() -  points[(i+1)%4].getY() ) * ( points[(i)%4].getY() - points[(i+1)%4].getY() )
); 
	}
	return cir;
}
};

class Pentagon: public Figure
{
private:
	Point points[4];
public:
	Pentagon(Point _a, Point _b, Point _c, Point _d, Point _e){
		this->points[0] = _a;
		this->points[1] = _b;
		this->points[2] = _c;
		this->points[3] = _d;
		this->points[4] = _e;
}
	double circumference()
{
	double cir = 0; // circumference
	for(int i=0;i<5;i++){ // cir Pentagon
	cir += sqrt(
 ( points[(i)%5].getX() -  points[(i+1)%5].getX() ) * ( points[(i)%5].getX() - points[(i+1)%5].getX() ) + 
 ( points[(i)%5].getY() -  points[(i+1)%5].getY() ) * ( points[(i)%5].getY() - points[(i+1)%5].getY() )
); 
	}
	return cir;
}
};

class FigureSpatial
{
	virtual double circumference(){
	return 0;
	}
};

class PyramidTriangular: public FigureSpatial
{
private:
	PointSpatial points[3];
public:
	PyramidTriangular(PointSpatial _a, PointSpatial _b, PointSpatial _c, PointSpatial _d){
		this->points[0] = _a;
		this->points[1] = _b;
		this->points[2] = _c;
		this->points[3] = _d;
}
	double circumference()
{
	double cir = 0; // circumference
	for(int i=0;i<3;i++){ // base of the pyramid
	cir += sqrt(
 ( points[(i)%3].getX() -  points[(i+1)%3].getX() ) * ( points[(i)%3].getX() - points[(i+1)%3].getX() ) + 
 ( points[(i)%3].getY() -  points[(i+1)%3].getY() ) * ( points[(i)%3].getY() - points[(i+1)%3].getY() ) +
 ( points[(i)%3].getZ() -  points[(i+1)%3].getZ() ) * ( points[(i)%3].getZ() - points[(i+1)%3].getZ() )
); 
	}
	for(int i=0;i<3;i++){ //the side walls of the pyramid
 cir += sqrt(
 ( points[i].getX() -  points[3].getX() ) * ( points[i].getX() - points[3].getX() ) + 
 ( points[i].getY() -  points[3].getY() ) * ( points[i].getY() - points[3].getY() ) +
 ( points[i].getZ() -  points[3].getZ() ) * ( points[i].getZ() - points[3].getZ() ));
}
	return cir;
}
};
class PyramidTetragonal: public FigureSpatial
{
private:
	PointSpatial points[4];
public:
	PyramidTetragonal(PointSpatial _a, PointSpatial _b, PointSpatial _c, PointSpatial _d, PointSpatial _e){
		this->points[0] = _a;
		this->points[1] = _b;
		this->points[2] = _c;
		this->points[3] = _d;
		this->points[4] = _e;
}
	double circumference()
{
	double cir = 0; // circumference
	for(int i=0;i<4;i++){ // base of the pyramid
	cir += sqrt(
 ( points[(i)%4].getX() -  points[(i+1)%4].getX() ) * ( points[(i)%4].getX() - points[(i+1)%4].getX() ) + 
 ( points[(i)%4].getY() -  points[(i+1)%4].getY() ) * ( points[(i)%4].getY() - points[(i+1)%4].getY() ) +
 ( points[(i)%4].getZ() -  points[(i+1)%4].getZ() ) * ( points[(i)%4].getZ() - points[(i+1)%4].getZ() )
); 
	}
	for(int i=0;i<4;i++){ //the side walls of the pyramid
 cir += sqrt(
 ( points[i].getX() -  points[4].getX() ) * ( points[i].getX() - points[4].getX() ) + 
 ( points[i].getY() -  points[4].getY() ) * ( points[i].getY() - points[4].getY() ) +
 ( points[i].getZ() -  points[4].getZ() ) * ( points[i].getZ() - points[4].getZ() ));
}
	return cir;
}

};
class PyramidPentagonal: public FigureSpatial
{
private:
	PointSpatial points[5];
public:
	PyramidPentagonal(PointSpatial _a, PointSpatial _b, PointSpatial _c, PointSpatial _d, PointSpatial _e, PointSpatial _f){
		this->points[0] = _a;
		this->points[1] = _b;
		this->points[2] = _c;
		this->points[3] = _d;
		this->points[4] = _e;
		this->points[5] = _f;
}
	double circumference()
{
	double cir = 0; // circumference
	for(int i=0;i<5;i++){ // base of the pyramid
	cir += sqrt(
 ( points[(i)%5].getX() -  points[(i+1)%5].getX() ) * ( points[(i)%5].getX() - points[(i+1)%5].getX() ) + 
 ( points[(i)%5].getY() -  points[(i+1)%5].getY() ) * ( points[(i)%5].getY() - points[(i+1)%5].getY() ) +
 ( points[(i)%5].getZ() -  points[(i+1)%5].getZ() ) * ( points[(i)%5].getZ() - points[(i+1)%5].getZ() )
); 
	}
	for(int i=0;i<5;i++){ //the side walls of the pyramid
 cir += sqrt(
 ( points[i].getX() -  points[5].getX() ) * ( points[i].getX() - points[5].getX() ) + 
 ( points[i].getY() -  points[5].getY() ) * ( points[i].getY() - points[5].getY() ) +
 ( points[i].getZ() -  points[5].getZ() ) * ( points[i].getZ() - points[5].getZ() ));
}
	return cir;
}

};
class PrismTriangular: public FigureSpatial
{
private:
	PointSpatial points[5];
public:
	PrismTriangular(PointSpatial _a, PointSpatial _b, PointSpatial _c, PointSpatial _d, PointSpatial _e, PointSpatial _f){
		this->points[0] = _a;
		this->points[1] = _b;
		this->points[2] = _c;
		this->points[3] = _d;
		this->points[4] = _e;
		this->points[5] = _f;
}
	double circumference()
{
	double cir = 0; // circumference
	for(int i=0;i<3;i++){ // base of the prism
	cir += sqrt(
 ( points[(i)%3].getX() -  points[(i+1)%3].getX() ) * ( points[(i)%3].getX() - points[(i+1)%3].getX() ) + 
 ( points[(i)%3].getY() -  points[(i+1)%3].getY() ) * ( points[(i)%3].getY() - points[(i+1)%3].getY() ) +
 ( points[(i)%3].getZ() -  points[(i+1)%3].getZ() ) * ( points[(i)%3].getZ() - points[(i+1)%3].getZ() )
); 
	}
	for(int i=3;i<6;i++){ // second base of the prism
	cir += sqrt(
 ( points[(i)%3+3].getX() -  points[(i+1)%3+3].getX() ) * ( points[(i)%3+3].getX() - points[(i+1)%3+3].getX() ) + 
 ( points[(i)%3+3].getY() -  points[(i+1)%3+3].getY() ) * ( points[(i)%3+3].getY() - points[(i+1)%3+3].getY() ) +
 ( points[(i)%3+3].getZ() -  points[(i+1)%3+3].getZ() ) * ( points[(i)%3+3].getZ() - points[(i+1)%3+3].getZ() )
); 
	}
	for(int i=0;i<3;i++){ //the side walls of the prism
 cir += sqrt(
 ( points[i].getX() -  points[i+3].getX() ) * ( points[i].getX() - points[i+3].getX() ) + 
 ( points[i].getY() -  points[i+3].getY() ) * ( points[i].getY() - points[i+3].getY() ) +
 ( points[i].getZ() -  points[i+3].getZ() ) * ( points[i].getZ() - points[i+3].getZ() ));
}
	return cir;
}
};
class PrismTetragonal: public FigureSpatial
{
private:
	PointSpatial points[7];
public:
	PrismTetragonal(PointSpatial _a, PointSpatial _b, PointSpatial _c, PointSpatial _d, PointSpatial _e, PointSpatial _f, PointSpatial _g, PointSpatial _h){
		this->points[0] = _a;
		this->points[1] = _b;
		this->points[2] = _c;
		this->points[3] = _d;
		this->points[4] = _e;
		this->points[5] = _f;
		this->points[6] = _g;
		this->points[7] = _h;
}
	double circumference()
{
	double cir = 0; // circumference
	for(int i=0;i<4;i++){ // base of the prism
	cir += sqrt(
 ( points[(i)%4].getX() -  points[(i+1)%4].getX() ) * ( points[(i)%4].getX() - points[(i+1)%4].getX() ) + 
 ( points[(i)%4].getY() -  points[(i+1)%4].getY() ) * ( points[(i)%4].getY() - points[(i+1)%4].getY() ) +
 ( points[(i)%4].getZ() -  points[(i+1)%4].getZ() ) * ( points[(i)%4].getZ() - points[(i+1)%4].getZ() )
); 
	}
	for(int i=4;i<8;i++){ // second base of the prism
	cir += sqrt(
 ( points[(i)%4+4].getX() -  points[(i+1)%4+4].getX() ) * ( points[(i)%4+4].getX() - points[(i+1)%4+4].getX() ) + 
 ( points[(i)%4+4].getY() -  points[(i+1)%4+4].getY() ) * ( points[(i)%4+4].getY() - points[(i+1)%4+4].getY() ) +
 ( points[(i)%4+4].getZ() -  points[(i+1)%4+4].getZ() ) * ( points[(i)%4+4].getZ() - points[(i+1)%4+4].getZ() )
); 
	}
	for(int i=0;i<4;i++){ //the side walls of the prism
 cir += sqrt(
 ( points[i].getX() -  points[i+4].getX() ) * ( points[i].getX() - points[i+4].getX() ) + 
 ( points[i].getY() -  points[i+4].getY() ) * ( points[i].getY() - points[i+4].getY() ) +
 ( points[i].getZ() -  points[i+4].getZ() ) * ( points[i].getZ() - points[i+4].getZ() ));
}

	return cir;
	}
};
class PrismPentagonal: public FigureSpatial
{
private:
	PointSpatial points[9];
public:
	PrismPentagonal(PointSpatial _a, PointSpatial _b, PointSpatial _c, PointSpatial _d, PointSpatial _e, PointSpatial _f, PointSpatial _g, PointSpatial _h, PointSpatial _i, PointSpatial _j){
		this->points[0] = _a;
		this->points[1] = _b;
		this->points[2] = _c;
		this->points[3] = _d;
		this->points[4] = _e;
		this->points[5] = _f;
		this->points[6] = _g;
		this->points[7] = _h;
		this->points[8] = _i;
		this->points[9] = _j;
}
	double circumference()
{
	double cir = 0; // circumference
	for(int i=0;i<5;i++){ // base of the prism
	cir += sqrt(
 ( points[(i)%5].getX() -  points[(i+1)%5].getX() ) * ( points[(i)%5].getX() - points[(i+1)%5].getX() ) + 
 ( points[(i)%5].getY() -  points[(i+1)%5].getY() ) * ( points[(i)%5].getY() - points[(i+1)%5].getY() ) +
 ( points[(i)%5].getZ() -  points[(i+1)%5].getZ() ) * ( points[(i)%5].getZ() - points[(i+1)%5].getZ() )
); 
	}
	for(int i=5;i<10;i++){ // second base of the prism
	cir += sqrt(
 ( points[(i)%5+5].getX() -  points[(i+1)%5+5].getX() ) * ( points[(i)%5+5].getX() - points[(i+1)%5+5].getX() ) + 
 ( points[(i)%5+5].getY() -  points[(i+1)%5+5].getY() ) * ( points[(i)%5+5].getY() - points[(i+1)%5+5].getY() ) +
 ( points[(i)%5+5].getZ() -  points[(i+1)%5+5].getZ() ) * ( points[(i)%5+5].getZ() - points[(i+1)%5+5].getZ() )
); 
	}
	for(int i=0;i<5;i++){ //the side walls of the prism
 cir += sqrt(
 ( points[i].getX() -  points[i+5].getX() ) * ( points[i].getX() - points[i+5].getX() ) + 
 ( points[i].getY() -  points[i+5].getY() ) * ( points[i].getY() - points[i+5].getY() ) +
 ( points[i].getZ() -  points[i+5].getZ() ) * ( points[i].getZ() - points[i+5].getZ() ));
}

	return cir;
	}
	
};
int main()
{
	double r = 2;
	double area;

Point _a(0,0);
Point _b(5,0);
Point _c(0,5);
Triangle test(_a,_b,_c);

std::cout<<test.area()<<std::endl;
system("pause");

		return 0;
}
